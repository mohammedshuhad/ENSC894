// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mm_mm,hls_ip_2020_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.212000,HLS_SYN_LAT=756316950529,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1318,HLS_SYN_LUT=1192,HLS_VERSION=2020_2_2}" *)

module mm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        alpha,
        beta
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_pp0_stage0 = 22'd4;
parameter    ap_ST_fsm_state6 = 22'd8;
parameter    ap_ST_fsm_pp1_stage0 = 22'd16;
parameter    ap_ST_fsm_state15 = 22'd32;
parameter    ap_ST_fsm_state16 = 22'd64;
parameter    ap_ST_fsm_pp2_stage0 = 22'd128;
parameter    ap_ST_fsm_state20 = 22'd256;
parameter    ap_ST_fsm_state21 = 22'd512;
parameter    ap_ST_fsm_pp3_stage0 = 22'd1024;
parameter    ap_ST_fsm_pp3_stage1 = 22'd2048;
parameter    ap_ST_fsm_pp3_stage2 = 22'd4096;
parameter    ap_ST_fsm_pp3_stage3 = 22'd8192;
parameter    ap_ST_fsm_pp3_stage4 = 22'd16384;
parameter    ap_ST_fsm_pp3_stage5 = 22'd32768;
parameter    ap_ST_fsm_pp3_stage6 = 22'd65536;
parameter    ap_ST_fsm_pp3_stage7 = 22'd131072;
parameter    ap_ST_fsm_pp3_stage8 = 22'd262144;
parameter    ap_ST_fsm_state44 = 22'd524288;
parameter    ap_ST_fsm_pp4_stage0 = 22'd1048576;
parameter    ap_ST_fsm_state48 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [23:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [23:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [23:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
input  [31:0] alpha;
input  [31:0] beta;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[23:0] C_address0;
reg C_ce0;
reg C_we0;
reg A_ce0;
reg B_ce0;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] j_reg_210;
reg   [12:0] j_reg_210_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [12:0] j_1_reg_222;
reg   [12:0] j_1_reg_222_pp1_iter1_reg;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_state12_pp1_stage0_iter5;
wire    ap_block_state13_pp1_stage0_iter6;
wire    ap_block_state14_pp1_stage0_iter7;
wire    ap_block_pp1_stage0_11001;
reg   [12:0] j_1_reg_222_pp1_iter2_reg;
reg   [12:0] j_1_reg_222_pp1_iter3_reg;
reg   [12:0] j_1_reg_222_pp1_iter4_reg;
reg   [12:0] j_1_reg_222_pp1_iter5_reg;
reg   [12:0] j_1_reg_222_pp1_iter6_reg;
reg   [12:0] j_3_reg_245;
reg   [12:0] j_3_reg_245_pp2_iter1_reg;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state17_pp2_stage0_iter0;
wire    ap_block_state18_pp2_stage0_iter1;
wire    ap_block_state19_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [12:0] k_reg_257;
reg   [31:0] add2_i_reg_269;
reg   [12:0] j_4_reg_280;
wire   [31:0] grp_fu_297_p2;
reg   [31:0] reg_301;
reg    ap_enable_reg_pp1_iter6;
reg   [0:0] icmp_ln79_reg_566;
reg   [0:0] icmp_ln79_reg_566_pp1_iter5_reg;
wire    ap_CS_fsm_pp3_stage6;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state28_pp3_stage6_iter0;
wire    ap_block_state37_pp3_stage6_iter1;
wire    ap_block_pp3_stage6_11001;
reg   [0:0] icmp_ln97_reg_633;
wire   [12:0] add_ln116_fu_307_p2;
reg   [12:0] add_ln116_reg_526;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln116_fu_313_p2;
wire   [23:0] tmp_1_fu_323_p3;
reg   [23:0] tmp_1_reg_535;
wire   [12:0] add_ln63_fu_331_p2;
reg   [12:0] add_ln63_reg_542;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln63_fu_337_p2;
reg   [0:0] icmp_ln63_reg_547;
reg   [0:0] icmp_ln63_reg_547_pp0_iter1_reg;
reg   [31:0] A_load_reg_556;
wire   [12:0] add_ln79_fu_366_p2;
reg   [12:0] add_ln79_reg_561;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln79_fu_372_p2;
reg   [0:0] icmp_ln79_reg_566_pp1_iter1_reg;
reg   [0:0] icmp_ln79_reg_566_pp1_iter2_reg;
reg   [0:0] icmp_ln79_reg_566_pp1_iter3_reg;
reg   [0:0] icmp_ln79_reg_566_pp1_iter4_reg;
reg   [0:0] icmp_ln79_reg_566_pp1_iter6_reg;
reg   [31:0] C_load_reg_575;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] bitcast_ln80_fu_392_p1;
wire   [12:0] add_ln119_fu_401_p2;
reg   [12:0] add_ln119_reg_585;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln119_fu_407_p2;
wire   [63:0] zext_ln119_fu_413_p1;
reg   [63:0] zext_ln119_reg_594;
wire   [23:0] zext_ln119_1_fu_417_p1;
reg   [23:0] zext_ln119_1_reg_599;
wire   [12:0] add_ln72_fu_421_p2;
reg   [12:0] add_ln72_reg_604;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln72_fu_427_p2;
reg   [0:0] icmp_ln72_reg_609;
reg   [0:0] icmp_ln72_reg_609_pp2_iter1_reg;
reg   [31:0] B_load_reg_618;
reg   [11:0] C_buff_addr_1_reg_623;
wire    ap_CS_fsm_state20;
wire   [31:0] C_buff_q0;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln97_fu_464_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state22_pp3_stage0_iter0;
wire    ap_block_state31_pp3_stage0_iter1;
wire    ap_block_state40_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln97_reg_633_pp3_iter1_reg;
reg   [0:0] icmp_ln97_reg_633_pp3_iter2_reg;
wire   [31:0] A_buff_q0;
reg   [31:0] A_buff_load_reg_647;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state23_pp3_stage1_iter0;
wire    ap_block_state32_pp3_stage1_iter1;
wire    ap_block_state41_pp3_stage1_iter2;
wire    ap_block_pp3_stage1_11001;
wire   [31:0] B_buff_q0;
reg   [31:0] B_buff_load_reg_652;
wire   [12:0] add_ln97_fu_476_p2;
reg   [12:0] add_ln97_reg_657;
wire    ap_CS_fsm_pp3_stage8;
wire    ap_block_state30_pp3_stage8_iter0;
wire    ap_block_state39_pp3_stage8_iter1;
wire    ap_block_pp3_stage8_11001;
reg   [31:0] mul3_i_reg_662;
wire    ap_CS_fsm_pp3_stage2;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_state24_pp3_stage2_iter0;
wire    ap_block_state33_pp3_stage2_iter1;
wire    ap_block_state42_pp3_stage2_iter2;
wire    ap_block_pp3_stage2_11001;
wire   [31:0] grp_fu_292_p2;
wire    ap_CS_fsm_pp3_stage3;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_state25_pp3_stage3_iter0;
wire    ap_block_state34_pp3_stage3_iter1;
wire    ap_block_state43_pp3_stage3_iter2;
wire    ap_block_pp3_stage3_11001;
wire   [12:0] add_ln88_fu_482_p2;
reg   [12:0] add_ln88_reg_672;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state45_pp4_stage0_iter0;
wire    ap_block_state46_pp4_stage0_iter1;
wire    ap_block_state47_pp4_stage0_iter2;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln88_fu_488_p2;
reg   [0:0] icmp_ln88_reg_677;
reg   [0:0] icmp_ln88_reg_677_pp4_iter1_reg;
reg   [31:0] C_buff_load_1_reg_686;
reg    ap_enable_reg_pp4_iter1;
wire   [23:0] add_ln89_fu_503_p2;
reg   [23:0] add_ln89_reg_691;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter7;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state17;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp3_stage8_subdone;
reg    ap_condition_pp3_flush_enable;
wire    ap_block_pp3_stage3_subdone;
reg    ap_condition_pp3_exit_iter1_state33;
wire    ap_CS_fsm_state44;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state45;
reg    ap_enable_reg_pp4_iter2;
reg   [11:0] A_buff_address0;
reg    A_buff_ce0;
reg    A_buff_we0;
wire   [31:0] A_buff_d0;
reg   [11:0] B_buff_address0;
reg    B_buff_ce0;
reg    B_buff_we0;
wire   [31:0] B_buff_d0;
reg   [11:0] C_buff_address0;
reg    C_buff_ce0;
reg    C_buff_we0;
reg   [31:0] C_buff_d0;
reg   [12:0] i_reg_199;
reg   [12:0] ap_phi_mux_j_phi_fu_214_p4;
wire    ap_block_pp0_stage0;
reg   [12:0] ap_phi_mux_j_1_phi_fu_226_p4;
wire    ap_block_pp1_stage0;
reg   [12:0] j_2_reg_234;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state15;
reg   [12:0] ap_phi_mux_j_3_phi_fu_249_p4;
wire    ap_block_pp2_stage0;
reg   [12:0] ap_phi_mux_k_phi_fu_261_p4;
wire    ap_block_pp3_stage0;
reg   [31:0] ap_phi_mux_add2_i_phi_fu_273_p4;
wire    ap_block_pp3_stage3;
reg   [12:0] ap_phi_mux_j_4_phi_fu_284_p4;
wire    ap_block_pp4_stage0;
wire   [63:0] zext_ln64_fu_352_p1;
wire   [63:0] j_cast1_fu_357_p1;
wire   [63:0] zext_ln80_fu_387_p1;
wire   [63:0] j_1_cast2_fu_396_p1;
wire   [63:0] zext_ln73_fu_450_p1;
wire   [63:0] j_3_cast4_fu_455_p1;
wire   [63:0] k_cast_fu_470_p1;
wire   [63:0] j_4_cast5_fu_494_p1;
wire   [63:0] zext_ln89_fu_508_p1;
reg   [31:0] grp_fu_297_p0;
reg   [31:0] grp_fu_297_p1;
wire    ap_block_pp3_stage2;
wire    ap_CS_fsm_pp3_stage7;
wire    ap_block_pp3_stage7;
wire   [11:0] empty_10_fu_319_p1;
wire   [23:0] j_cast_fu_343_p1;
wire   [23:0] add_ln64_fu_347_p2;
wire   [23:0] j_1_cast_fu_378_p1;
wire   [23:0] add_ln80_fu_382_p2;
wire   [11:0] trunc_ln73_fu_433_p1;
wire   [23:0] shl_ln_fu_437_p3;
wire   [23:0] add_ln73_fu_445_p2;
wire    ap_block_pp3_stage8;
wire   [23:0] j_4_cast_fu_499_p1;
reg   [21:0] ap_NS_fsm;
wire    ap_block_pp3_stage0_subdone;
wire    ap_block_pp3_stage1_subdone;
wire    ap_block_pp3_stage2_subdone;
wire    ap_block_state26_pp3_stage4_iter0;
wire    ap_block_state35_pp3_stage4_iter1;
wire    ap_block_pp3_stage4_subdone;
wire    ap_block_pp3_stage4_11001;
wire    ap_block_state27_pp3_stage5_iter0;
wire    ap_block_state36_pp3_stage5_iter1;
wire    ap_block_pp3_stage5_subdone;
wire    ap_block_pp3_stage5_11001;
wire    ap_block_pp3_stage6_subdone;
wire    ap_block_state29_pp3_stage7_iter0;
wire    ap_block_state38_pp3_stage7_iter1;
wire    ap_block_pp3_stage7_subdone;
wire    ap_block_pp3_stage7_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
end

mm_A_buff #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
A_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_buff_address0),
    .ce0(A_buff_ce0),
    .we0(A_buff_we0),
    .d0(A_buff_d0),
    .q0(A_buff_q0)
);

mm_A_buff #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
B_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_buff_address0),
    .ce0(B_buff_ce0),
    .we0(B_buff_we0),
    .d0(B_buff_d0),
    .q0(B_buff_q0)
);

mm_A_buff #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
C_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_buff_address0),
    .ce0(C_buff_ce0),
    .we0(C_buff_we0),
    .d0(C_buff_d0),
    .q0(C_buff_q0)
);

mm_fadd_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_10_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_add2_i_phi_fu_273_p4),
    .din1(mul3_i_reg_662),
    .ce(1'b1),
    .dout(grp_fu_292_p2)
);

mm_fmul_32ns_32ns_32_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_5_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(1'b1),
    .dout(grp_fu_297_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln116_fu_313_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln116_fu_313_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln119_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state17)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state17);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((icmp_ln119_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage3_subdone) & (1'b1 == ap_condition_pp3_exit_iter1_state33) & (1'b1 == ap_CS_fsm_pp3_stage3) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp3_stage8_subdone) & (1'b1 == ap_CS_fsm_pp3_stage8))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter1_state33) & (((1'b0 == ap_block_pp3_stage3_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage3)) | ((1'b0 == ap_block_pp3_stage8_subdone) & (1'b1 == ap_CS_fsm_pp3_stage8))))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
        end else if ((((1'b0 == ap_block_pp3_stage3_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage3)) | ((1'b0 == ap_block_pp3_stage8_subdone) & (1'b1 == ap_CS_fsm_pp3_stage8)))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state45) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state45)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state45);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add2_i_reg_269 <= C_buff_q0;
    end else if (((1'b0 == ap_block_pp3_stage3_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln97_reg_633_pp3_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage3))) begin
        add2_i_reg_269 <= grp_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_199 <= 13'd0;
    end else if (((icmp_ln119_fu_407_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_reg_199 <= add_ln116_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_222 <= 13'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln79_reg_566 == 1'd0))) begin
        j_1_reg_222 <= add_ln79_reg_561;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_2_reg_234 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        j_2_reg_234 <= add_ln119_reg_585;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        j_3_reg_245 <= 13'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln72_reg_609 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_3_reg_245 <= add_ln72_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_4_reg_280 <= 13'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln88_reg_677 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        j_4_reg_280 <= add_ln88_reg_672;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln116_fu_313_p2 == 1'd0))) begin
        j_reg_210 <= 13'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_547 == 1'd0))) begin
        j_reg_210 <= add_ln63_reg_542;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        k_reg_257 <= 13'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln97_reg_633 == 1'd0))) begin
        k_reg_257 <= add_ln97_reg_657;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (icmp_ln97_reg_633 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        A_buff_load_reg_647 <= A_buff_q0;
        B_buff_load_reg_652 <= B_buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_547 == 1'd0))) begin
        A_load_reg_556 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln72_reg_609 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_load_reg_618 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        C_buff_addr_1_reg_623 <= zext_ln119_reg_594;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln88_reg_677 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        C_buff_load_1_reg_686 <= C_buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln79_reg_566 == 1'd0))) begin
        C_load_reg_575 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln116_reg_526 <= add_ln116_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln119_reg_585 <= add_ln119_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln63_reg_542 <= add_ln63_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln72_reg_604 <= add_ln72_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        add_ln79_reg_561 <= add_ln79_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln88_reg_672 <= add_ln88_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln88_reg_677 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln89_reg_691 <= add_ln89_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage8_11001) & (1'b1 == ap_CS_fsm_pp3_stage8) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        add_ln97_reg_657 <= add_ln97_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln63_reg_547 <= icmp_ln63_fu_337_p2;
        icmp_ln63_reg_547_pp0_iter1_reg <= icmp_ln63_reg_547;
        j_reg_210_pp0_iter1_reg <= j_reg_210;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln72_reg_609 <= icmp_ln72_fu_427_p2;
        icmp_ln72_reg_609_pp2_iter1_reg <= icmp_ln72_reg_609;
        j_3_reg_245_pp2_iter1_reg <= j_3_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln79_reg_566 <= icmp_ln79_fu_372_p2;
        icmp_ln79_reg_566_pp1_iter1_reg <= icmp_ln79_reg_566;
        j_1_reg_222_pp1_iter1_reg <= j_1_reg_222;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln79_reg_566_pp1_iter2_reg <= icmp_ln79_reg_566_pp1_iter1_reg;
        icmp_ln79_reg_566_pp1_iter3_reg <= icmp_ln79_reg_566_pp1_iter2_reg;
        icmp_ln79_reg_566_pp1_iter4_reg <= icmp_ln79_reg_566_pp1_iter3_reg;
        icmp_ln79_reg_566_pp1_iter5_reg <= icmp_ln79_reg_566_pp1_iter4_reg;
        icmp_ln79_reg_566_pp1_iter6_reg <= icmp_ln79_reg_566_pp1_iter5_reg;
        j_1_reg_222_pp1_iter2_reg <= j_1_reg_222_pp1_iter1_reg;
        j_1_reg_222_pp1_iter3_reg <= j_1_reg_222_pp1_iter2_reg;
        j_1_reg_222_pp1_iter4_reg <= j_1_reg_222_pp1_iter3_reg;
        j_1_reg_222_pp1_iter5_reg <= j_1_reg_222_pp1_iter4_reg;
        j_1_reg_222_pp1_iter6_reg <= j_1_reg_222_pp1_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln88_reg_677 <= icmp_ln88_fu_488_p2;
        icmp_ln88_reg_677_pp4_iter1_reg <= icmp_ln88_reg_677;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln97_reg_633 <= icmp_ln97_fu_464_p2;
        icmp_ln97_reg_633_pp3_iter1_reg <= icmp_ln97_reg_633;
        icmp_ln97_reg_633_pp3_iter2_reg <= icmp_ln97_reg_633_pp3_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln97_reg_633_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2))) begin
        mul3_i_reg_662 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln79_reg_566_pp1_iter5_reg == 1'd0) & (ap_enable_reg_pp1_iter6 == 1'b1)) | ((1'b0 == ap_block_pp3_stage6_11001) & (1'b1 == ap_CS_fsm_pp3_stage6) & (icmp_ln97_reg_633 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        reg_301 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln116_fu_313_p2 == 1'd0))) begin
        tmp_1_reg_535[23 : 12] <= tmp_1_fu_323_p3[23 : 12];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        zext_ln119_1_reg_599[12 : 0] <= zext_ln119_1_fu_417_p1[12 : 0];
        zext_ln119_reg_594[12 : 0] <= zext_ln119_fu_413_p1[12 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        A_buff_address0 = k_cast_fu_470_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_buff_address0 = j_cast1_fu_357_p1;
    end else begin
        A_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        A_buff_ce0 = 1'b1;
    end else begin
        A_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln63_reg_547_pp0_iter1_reg == 1'd0))) begin
        A_buff_we0 = 1'b1;
    end else begin
        A_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        B_buff_address0 = k_cast_fu_470_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        B_buff_address0 = j_3_cast4_fu_455_p1;
    end else begin
        B_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        B_buff_ce0 = 1'b1;
    end else begin
        B_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln72_reg_609_pp2_iter1_reg == 1'd0))) begin
        B_buff_we0 = 1'b1;
    end else begin
        B_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        C_address0 = zext_ln89_fu_508_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        C_address0 = zext_ln80_fu_387_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        C_buff_address0 = j_4_cast5_fu_494_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        C_buff_address0 = C_buff_addr_1_reg_623;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        C_buff_address0 = zext_ln119_reg_594;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter7 == 1'b1))) begin
        C_buff_address0 = j_1_cast2_fu_396_p1;
    end else begin
        C_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        C_buff_ce0 = 1'b1;
    end else begin
        C_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        C_buff_d0 = add2_i_reg_269;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter7 == 1'b1))) begin
        C_buff_d0 = reg_301;
    end else begin
        C_buff_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1) & (icmp_ln79_reg_566_pp1_iter6_reg == 1'd0)))) begin
        C_buff_we0 = 1'b1;
    end else begin
        C_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln88_reg_677_pp4_iter1_reg == 1'd0))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_337_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln79_fu_372_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln72_fu_427_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_condition_pp3_exit_iter1_state33 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter1_state33 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage8_subdone) & (1'b1 == ap_CS_fsm_pp3_stage8) & (icmp_ln97_reg_633 == 1'd1))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln88_fu_488_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state45 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state45 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln116_fu_313_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage3) & (ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln97_reg_633_pp3_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage3))) begin
        ap_phi_mux_add2_i_phi_fu_273_p4 = grp_fu_292_p2;
    end else begin
        ap_phi_mux_add2_i_phi_fu_273_p4 = add2_i_reg_269;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln79_reg_566 == 1'd0))) begin
        ap_phi_mux_j_1_phi_fu_226_p4 = add_ln79_reg_561;
    end else begin
        ap_phi_mux_j_1_phi_fu_226_p4 = j_1_reg_222;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln72_reg_609 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_3_phi_fu_249_p4 = add_ln72_reg_604;
    end else begin
        ap_phi_mux_j_3_phi_fu_249_p4 = j_3_reg_245;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln88_reg_677 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        ap_phi_mux_j_4_phi_fu_284_p4 = add_ln88_reg_672;
    end else begin
        ap_phi_mux_j_4_phi_fu_284_p4 = j_4_reg_280;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_547 == 1'd0))) begin
        ap_phi_mux_j_phi_fu_214_p4 = add_ln63_reg_542;
    end else begin
        ap_phi_mux_j_phi_fu_214_p4 = j_reg_210;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln97_reg_633 == 1'd0))) begin
        ap_phi_mux_k_phi_fu_261_p4 = add_ln97_reg_657;
    end else begin
        ap_phi_mux_k_phi_fu_261_p4 = k_reg_257;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln116_fu_313_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage7) & (1'b1 == ap_CS_fsm_pp3_stage7) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        grp_fu_297_p0 = reg_301;
    end else if (((1'b0 == ap_block_pp3_stage2) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        grp_fu_297_p0 = A_buff_load_reg_647;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_297_p0 = bitcast_ln80_fu_392_p1;
    end else begin
        grp_fu_297_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage7) & (1'b1 == ap_CS_fsm_pp3_stage7) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        grp_fu_297_p1 = B_buff_load_reg_652;
    end else if (((1'b0 == ap_block_pp3_stage2) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        grp_fu_297_p1 = alpha;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_297_p1 = beta;
    end else begin
        grp_fu_297_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln116_fu_313_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln63_fu_337_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln63_fu_337_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln79_fu_372_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter7 == 1'b1) & (ap_enable_reg_pp1_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter7 == 1'b1) & (ap_enable_reg_pp1_iter6 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln79_fu_372_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln119_fu_407_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln72_fu_427_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln72_fu_427_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((~((1'b0 == ap_block_pp3_stage2_subdone) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b0)) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else if (((1'b0 == ap_block_pp3_stage2_subdone) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((~((1'b0 == ap_block_pp3_stage3_subdone) & (1'b1 == ap_condition_pp3_exit_iter1_state33) & (1'b1 == ap_CS_fsm_pp3_stage3)) & (1'b0 == ap_block_pp3_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end else if (((1'b0 == ap_block_pp3_stage3_subdone) & (1'b1 == ap_condition_pp3_exit_iter1_state33) & (1'b1 == ap_CS_fsm_pp3_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_pp3_stage4 : begin
            if ((1'b0 == ap_block_pp3_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end
        end
        ap_ST_fsm_pp3_stage5 : begin
            if ((1'b0 == ap_block_pp3_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end
        end
        ap_ST_fsm_pp3_stage6 : begin
            if ((1'b0 == ap_block_pp3_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end
        end
        ap_ST_fsm_pp3_stage7 : begin
            if ((1'b0 == ap_block_pp3_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end
        end
        ap_ST_fsm_pp3_stage8 : begin
            if ((1'b0 == ap_block_pp3_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln88_fu_488_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln88_fu_488_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln64_fu_352_p1;

assign A_buff_d0 = A_load_reg_556;

assign B_address0 = zext_ln73_fu_450_p1;

assign B_buff_d0 = B_load_reg_618;

assign C_d0 = C_buff_load_1_reg_686;

assign add_ln116_fu_307_p2 = (i_reg_199 + 13'd1);

assign add_ln119_fu_401_p2 = (j_2_reg_234 + 13'd1);

assign add_ln63_fu_331_p2 = (ap_phi_mux_j_phi_fu_214_p4 + 13'd1);

assign add_ln64_fu_347_p2 = (j_cast_fu_343_p1 + tmp_1_reg_535);

assign add_ln72_fu_421_p2 = (ap_phi_mux_j_3_phi_fu_249_p4 + 13'd1);

assign add_ln73_fu_445_p2 = (shl_ln_fu_437_p3 + zext_ln119_1_reg_599);

assign add_ln79_fu_366_p2 = (ap_phi_mux_j_1_phi_fu_226_p4 + 13'd1);

assign add_ln80_fu_382_p2 = (j_1_cast_fu_378_p1 + tmp_1_reg_535);

assign add_ln88_fu_482_p2 = (ap_phi_mux_j_4_phi_fu_284_p4 + 13'd1);

assign add_ln89_fu_503_p2 = (j_4_cast_fu_499_p1 + tmp_1_reg_535);

assign add_ln97_fu_476_p2 = (k_reg_257 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp3_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp3_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp3_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp3_stage8 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp3_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp3_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp3_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp3_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign bitcast_ln80_fu_392_p1 = C_load_reg_575;

assign empty_10_fu_319_p1 = i_reg_199[11:0];

assign icmp_ln116_fu_313_p2 = ((i_reg_199 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_407_p2 = ((j_2_reg_234 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_337_p2 = ((ap_phi_mux_j_phi_fu_214_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_427_p2 = ((ap_phi_mux_j_3_phi_fu_249_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_372_p2 = ((ap_phi_mux_j_1_phi_fu_226_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_488_p2 = ((ap_phi_mux_j_4_phi_fu_284_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_464_p2 = ((ap_phi_mux_k_phi_fu_261_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign j_1_cast2_fu_396_p1 = j_1_reg_222_pp1_iter6_reg;

assign j_1_cast_fu_378_p1 = ap_phi_mux_j_1_phi_fu_226_p4;

assign j_3_cast4_fu_455_p1 = j_3_reg_245_pp2_iter1_reg;

assign j_4_cast5_fu_494_p1 = ap_phi_mux_j_4_phi_fu_284_p4;

assign j_4_cast_fu_499_p1 = j_4_reg_280;

assign j_cast1_fu_357_p1 = j_reg_210_pp0_iter1_reg;

assign j_cast_fu_343_p1 = ap_phi_mux_j_phi_fu_214_p4;

assign k_cast_fu_470_p1 = ap_phi_mux_k_phi_fu_261_p4;

assign shl_ln_fu_437_p3 = {{trunc_ln73_fu_433_p1}, {12'd0}};

assign tmp_1_fu_323_p3 = {{empty_10_fu_319_p1}, {12'd0}};

assign trunc_ln73_fu_433_p1 = ap_phi_mux_j_3_phi_fu_249_p4[11:0];

assign zext_ln119_1_fu_417_p1 = j_2_reg_234;

assign zext_ln119_fu_413_p1 = j_2_reg_234;

assign zext_ln64_fu_352_p1 = add_ln64_fu_347_p2;

assign zext_ln73_fu_450_p1 = add_ln73_fu_445_p2;

assign zext_ln80_fu_387_p1 = add_ln80_fu_382_p2;

assign zext_ln89_fu_508_p1 = add_ln89_reg_691;

always @ (posedge ap_clk) begin
    tmp_1_reg_535[11:0] <= 12'b000000000000;
    zext_ln119_reg_594[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln119_1_reg_599[23:13] <= 11'b00000000000;
end

endmodule //mm
